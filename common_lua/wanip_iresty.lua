----------------------提供一些IP操作类的一些函数
--1>域名解释--
--2>获取本机的公网IP的封装--

local resolver = require ("resty.dns.resolver")
local http_iresty = require ("resty.http")

local _M = {} -- 局部的变量
_M._VERSION = '1.0' -- 模块版本

--# Generated by NetworkManager
--nameserver 10.202.72.118
--nameserver 10.202.72.116
local function get_my_system_dns()
	local dns1 = nil;
	local dns2 = nil;
	local file = io.open("/etc/resolv.conf", "r") --使用io.open()函数，以只读模式打开文件
	if file then
		for line in file:lines() do --使用file:lines()函数逐行读取文件
			if not dns1 then
				dns1 = string.match(line,"nameserver (%d+.%d+.%d+.%d+)")
			elseif not dns2 then
				dns2 = string.match(line,"nameserver (%d+.%d+.%d+.%d+)")
			else
				break
			end
		end
		file:close()
	end
	return dns1,dns2
end

local function get_domain_ip_by_dns(domain,dns)
	print("[debug]------>use dns=",dns)
	local r, err = resolver:new{
						nameservers = {dns, {dns, 53}},
						retrans = 3, -- 3 retransmissions on receive timeout
						timeout = 5000, -- 5 sec
					}
	if not r then
		return nil, "failed to instantiate the resolver: " .. err
	end
	local answers, err = r:query(domain)
	if not answers then
		return nil, "dns query failed: " .. err
	end
	if answers.errcode then
		return nil, "server returned error code: " .. answers.errcode .. ": " .. answers.errstr
	end
	for i, ans in ipairs(answers) do
		if ans.address then
			return ans.address
		end
	end
	return nil, "not founded"
end

local function get_domain_ip(domain)
	--dns 使用系统中设定的，即/etc/resolv.conf 中配置的
	local dns1,dns2 = get_my_system_dns()
	if dns1 then
		local ipaddr, err = get_domain_ip_by_dns(domain,dns1)
		if ipaddr then
			return ipaddr
		end
	end
	if dns2 then
		local ipaddr, err = get_domain_ip_by_dns(domain,dns2)
		if ipaddr then
			return ipaddr
		end
	end
	local ipaddr, err = get_domain_ip_by_dns(domain,"8.8.8.8")
	if ipaddr then
		return ipaddr
	end
	return nil, "get_domain_ip failed"
end

local function getfrom_sohu()
	--域名解释
	local ipaddr, err = get_domain_ip("pv.sohu.com")
	if not ipaddr then
		ngx.log(ngx.ERR, "failed to get_domain_ip_by_dns err=",err)
		return false,"failed to get_domain_ip_by_dns pv.sohu.com"
	end
	print("[debug]------>pv.sohu.com = ",ipaddr)
	--获取http请求
	local httpc = http_iresty.new()
	httpc:set_timeout(3000)
	httpc:connect(ipaddr, 80)
	local res, err = httpc:request{
		path = "/cityjson",
		headers = {
			["Host"] = "pv.sohu.com",
		},
	}
	if not res then
		ngx.log(ngx.ERR, "failed to request pv.sohu.com",err)
		return false,"failed to request pv.sohu.com1"
	end
	--读取返回的消息体::: "var returnCitySN = {"cip": "60.12.9.26", "cid": "330100", "cname": "浙江省杭州市"};"
	local reader = res.body_reader
	local chunk, err = reader(8192)
	if (not chunk) or err then
		ngx.log(ngx.ERR,"failed to reader ",err)
		return false,"failed to reader "
	end
	local wanip = string.match(chunk,"{\"cip\": \"(%d+.%d+.%d+.%d+)\"")
	if wanip then
		return wanip
	end
	return false,"wanip not found"
end

local function getfrom_taobao()
	--域名解释
	local ipaddr, err = get_domain_ip("ip.taobao.com")
	if not ipaddr then
		ngx.log(ngx.ERR, "failed to get_domain_ip_by_dns err=",err)
		return false,"failed to get_domain_ip_by_dns ip.taobao.com"
	end
	print("[debug]------>ip.taobao.com = ",ipaddr)
	--获取http请求
	local httpc = http_iresty.new()
	httpc:set_timeout(3000)
	httpc:connect(ipaddr, 80)
	local res, err = httpc:request{
		path = "/service/getIpInfo.php?ip=myip",
		headers = {
			["Host"] = "ip.taobao.com",
		},
	}
	if not res then
		ngx.log(ngx.ERR, "failed to request ip.taobao.com",err)
		return false,"failed to request ip.taobao.com"
	end
	--读取返回的消息体::: "isp_id":"100026","ip":"60.12.9.26"}}
	local reader = res.body_reader
	repeat
        local chunk, err = reader(8192)
        if err then
			ngx.log(ngx.ERR,"failed to reader ",err)
			return false,"failed to reader "
        end
        if chunk then
			print("debug--->",chunk)
			local wanip = string.match(chunk,"\"ip\":\"(%d+.%d+.%d+.%d+)\"")
			if wanip then
				return wanip
			end
        end
	until not chunk
	return false,"wanip not found"
end

--下面函数功能有问题，原因是ns1.dnspod.net中对请求处理有问题，直接关闭连接
--即使chrome用来测试也是有问题
local function getfrom_dnspod()
	--域名解释
	local ipaddr, err = get_domain_ip("ns1.dnspod.net")
	if not ipaddr then
		ngx.log(ngx.ERR, "failed to get_domain_ip_by_dns err=",err)
		return false,"failed to get_domain_ip_by_dns ns1.dnspod.net"
	end
	print("[debug]------>ns1.dnspod.net = ",ipaddr)
	local httpc = http_iresty.new()
	local res, err = httpc:request_uri("http://"..ipaddr..":6666/", {
										method = "GET",
										headers = {
											["Host"] = "ns1.dnspod.net:6666",
											["Accept"] = "text/html, application/xhtml+xml, */*",
											["Accept-Language"] = "zh-CN",
											["Connection"] = "Keep-Alive",
											["DNT"] = "1"
										}
									})
    if not res then
		ngx.say("failed to request: ", err)
		return false,"failed to request"
	end
	local wanip = string.match(res.body,"(%d+.%d+.%d+.%d+)")
	if wanip then
		return wanip
	end
	return false,"wanip not found"
end


--------------------------------------------------------------------------
--1>域名解释--
function _M.getdomainip(domain)
	local ip = string.match(domain,"(%d+.%d+.%d+.%d+)")
  if ip then
		return ip,"domain is valid ip"
	end
	return get_domain_ip(domain)
end

--2>获取本机的公网IP的封装--
--[[
	A类 10.0.0.0
　　B类 172.16.0.0--172.31.0.0  
　　C类 192.168.0.0--192.168.255.0
--]]
function _M.getwanip()
	local wanip,err = getfrom_taobao()
	if wanip then
		--判断获取到的IP地址是否为公网IP
		local ret1 = string.match(wanip,"(10.%d+.%d+.%d+)")
		local ret2 = string.match(wanip,"(172.%d+.%d+.%d+)")
		local ret3 = string.match(wanip,"(192.168.%d+.%d+)")
		local ret4 = string.match(wanip,"(%d+.%d+.%d+.%d+)")
		if 	ret1 == nil and ret2 == nil and ret3 == nil and ret4 ~= nil then
			return wanip
		end
	end
	ngx.log(ngx.ERR, "failed to getfrom_taobao",err)
	
	local wanip,err = getfrom_sohu()
	if wanip then
		--判断获取到的IP地址是否为公网IP
		local ret1 = string.match(wanip,"(10.%d+.%d+.%d+)")
		local ret2 = string.match(wanip,"(172.%d+.%d+.%d+)")
		local ret3 = string.match(wanip,"(192.168.%d+.%d+)")
		local ret4 = string.match(wanip,"(%d+.%d+.%d+.%d+)")
		if 	ret1 == nil and ret2 == nil and ret3 == nil and ret4 ~= nil then
			return wanip
		end
	end
	ngx.log(ngx.ERR, "failed to getfrom_sohu",err)
	--[[
	local wanip,err = getfrom_dnspod()
	if wanip then
		return wanip
	end
	ngx.log(ngx.ERR, "failed to getfrom_dnspod",err)
	]]
	return false,"failed to getwanip"
end

return _M
